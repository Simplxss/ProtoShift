/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.21'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Kotlin
    id 'org.jetbrains.kotlin.jvm' version '1.8.20-RC'

    // Apply the java plugin to add support for Java
    id 'java'

    // Eclipse Support
    id 'eclipse'

    // IntelliJ Support
    id 'idea'

    // Maven
    id 'maven-publish'
    id 'signing'
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = 'xyz.protoshifts'
version = 'alpha'

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.5'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.6'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.6'

    implementation group: 'org.jline', name: 'jline', version: '3.23.0'
    implementation group: 'org.jline', name: 'jline-terminal-jna', version: '3.23.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.12.1'

    implementation group: 'io.netty', name: 'netty-all', version: '4.1.90.Final'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.22.2'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.22.2'

    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.20-RC'

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

}

configurations.configureEach {
    exclude group: 'org.slf4j', module: 'slf4j'
}

application {
    // Define the main class for the application
    mainClassName = 'emu.protoshift.ProtoShift'
}


jar {
    exclude '*.proto'

    manifest {
        attributes 'Main-Class': 'emu.protoshift.ProtoShift'
    }

    archiveBaseName = 'protoshift'
    if (project.hasProperty('jarFilename')) {
        archiveFileName = "${jarFilename}.${archiveExtension}"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from('src/main/java') {
        include '*.xml'
    }

    destinationDirectory = file(".")
}

sourceSets {
    main {
        java {
            // In addition to the default 'src/main/proto'
            srcDir 'src/generated'
        }
    }
}

idea {
    module {
        // proto files and generated Java files are automatically added as
        // source dirs.
        // If you have additional sources, add them here:
        sourceDirs += file("/proto/");
    }
}

javadoc {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.register('injectGitHash') {
    def gitCommitHash = {
        try {
            return 'git rev-parse --verify --short HEAD'.execute().text.trim()
        } catch (ignored) {
            return "GIT_NOT_FOUND"
        }
    }
    new File(projectDir, "src/main/java/emu/protoshift/BuildConfig.java").text =
"""package emu.protoshift;
public class BuildConfig {
    public static final String VERSION = \"${version}\";
    public static final String GIT_HASH = \"${gitCommitHash()}\";
}
"""
}

repositories {
    mavenCentral()
}
