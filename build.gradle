import org.gradle.plugins.ide.eclipse.model.SourceFolder

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.21'

    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Kotlin
    id 'org.jetbrains.kotlin.jvm' version '1.8.0-Beta'

    // Apply the java plugin to add support for Java
    id 'java'

    // Eclipse Support
    id 'eclipse'

    // IntelliJ Support
    id 'idea'

    // Maven
    id 'maven-publish'
    id 'signing'
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = 'xyz.grasscutters'
version = '3.3-dev'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    gradlePluginPortal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.3'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.4'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.4'

    implementation group: 'org.jline', name: 'jline', version: '3.21.0'
    implementation group: 'org.jline', name: 'jline-terminal-jna', version: '3.21.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.10.0'

    implementation group: 'io.netty', name: 'netty-all', version: '4.1.71.Final'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.21.7'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.21.7'

    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0-Beta"

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j'
}

application {
    // Define the main class for the application
    mainClassName = 'emu.grasscutter.Grasscutter'
}


jar {
    exclude("main") // duplicated jar root main, very confusing
    exclude("logback-test.xml")
    exclude("*.proto")

    manifest {
        attributes 'Main-Class': 'emu.grasscutter.Grasscutter'
    }


    archiveBaseName = 'grasscutter'
    if (project.hasProperty('jarFilename')) {
        archiveFileName = "${jarFilename}-${version}"
    }

    zip64 = true
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from('src/main/java') {
        include '*.xml'
    }

    destinationDirectory = file(".")

}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'grasscutter'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Grasscutter'
                description = 'A server software reimplementation for an anime game.'
                url = 'https://github.com/Grasscutters/Grasscutter'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'meledy'
                        name = 'Meledy'
                        email = 'meledy@xigam.tech' // not a real email kek
                    }
                    developer {
                        id = 'magix'
                        name = 'Magix'
                        email = 'magix@xigam.tech'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:Grasscutters/Grasscutter.git'
                    developerConnection = 'scm:git:ssh://github.com:Grasscutters/Grasscutter.git'
                    url = 'https://github.com/Grasscutters/Grasscutter'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            name = 'sonatype'
            credentials(PasswordCredentials)
        }
    }
}

clean {
}

sourceSets {
    main {
        java {
            // In addition to the default 'src/main/proto'
            srcDir 'src/generated'
        }
        java {
            srcDir 'src/java'
        }
    }
}

idea {
    module {
        // proto files and generated Java files are automatically added as
        // source dirs.
        // If you have additional sources, add them here:
        sourceDirs += file("/proto/new/");
        sourceDirs += file("/proto/old/");
    }
}

eclipse {
    classpath {
        file.whenMerged { cp ->
            cp.entries.add(new SourceFolder('src/generated/main/java', null))
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task injectGitHash {
    def gitCommitHash = {
        try {
            return 'git rev-parse --verify --short HEAD'.execute().text.trim()
        } catch (e) {
            return "GIT_NOT_FOUND"
        }
    }
    new File(projectDir, "src/main/java/emu/grasscutter/BuildConfig.java").text = """
        package emu.grasscutter;
        public class BuildConfig {
                public static final String VERSION = \"${version}\";
                public static final String GIT_HASH = \"${gitCommitHash()}\";
        }
    """
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
